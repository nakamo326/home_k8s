- name: Install Kubernetes toolchain on Ubuntu
  hosts: hosts
  become: true
  become_user: root
  vars:
    os: "xUbuntu_22.04"
    kube_version: "1.27"
  tasks:
    - name: Install Packages
      ansible.builtin.package:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
    - name: Download Google Cloud public signing key
      ansible.builtin.get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        dest: /tmp/kubernetes-archive-keyring.gpg
        mode: "0644"
    - name: Install Google Cloud public signing key
      ansible.builtin.command: gpg --batch --yes --dearmor -o /usr/share/keyrings/kubernetes-archive-keyring.gpg /tmp/kubernetes-archive-keyring.gpg
      register: gpg_output
      changed_when: gpg_output.rc == 0
    - name: Add the Kubernetes apt repository
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        line: "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
        create: true
        mode: "0644"
    - name: Install Kubernetes Packages
      ansible.builtin.apt:
        pkg:
          - kubelet
          - kubeadm
          - kubectl
        update_cache: true
    - name: Hold Kubernetes Packages
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      with_items:
        - kubelet
        - kubeadm
        - kubectl

    - name: Define libcontainers repository sources list
      ansible.builtin.lineinfile:
        path: "/etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
        line:
          "deb [signed-by=/usr/share/keyrings/libcontainers-archive-keyring.gpg] \
          https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ os }}/ /"
        create: true
        mode: "0644"
    - name: Define cri-o repository sources list
      ansible.builtin.lineinfile:
        path: "/etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:{{ kube_version }}.list"
        line:
          "deb [signed-by=/usr/share/keyrings/libcontainers-crio-archive-keyring.gpg] \
          https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ kube_version }}/{{ os }}/ /"
        create: true
        mode: "0644"
    - name: Download and install keys
      block:
        - name: Download libcontainers key
          ansible.builtin.get_url:
            url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ os }}/Release.key
            dest: /tmp/libcontainers-archive-keyring.gpg
            mode: "0644"
        - name: Install libcontainers key
          ansible.builtin.command: gpg --batch --yes --dearmor -o /usr/share/keyrings/libcontainers-archive-keyring.gpg /tmp/libcontainers-archive-keyring.gpg
          register: gpg_output
          changed_when: gpg_output.rc == 0
        - name: Download crio key
          ansible.builtin.get_url:
            url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ kube_version }}/{{ os }}/Release.key
            dest: /tmp/libcontainers-crio-archive-keyring.gpg
            mode: "0644"
        - name: Install crio key
          ansible.builtin.command:
            "gpg --batch --yes --dearmor -o /usr/share/keyrings/libcontainers-crio-archive-keyring.gpg \
            /tmp/libcontainers-crio-archive-keyring.gpg"
          register: gpg_output
          changed_when: gpg_output.rc == 0
    - name: Install CRI-O
      ansible.builtin.apt:
        pkg:
          - cri-o
          - cri-o-runc
        update_cache: true
    - name: Enable CRI-O
      ansible.builtin.service:
        name: crio
        enabled: true
        state: started
    - name: Setting kernel module
      ansible.builtin.lineinfile:
        path: /etc/modules-load.d/k8s.conf
        line: "{{ item }}"
        create: true
        mode: "0644"
      with_items:
        - overlay
        - br_netfilter
    - name: Load kernel module
      community.general.modprobe:
        name: "{{ item }}"
        state: present
      with_items:
        - overlay
        - br_netfilter
    - name: Setting Sysctl
      ansible.builtin.lineinfile:
        path: /etc/sysctl.conf
        regexp: "^{{ item.regexp }}.*"
        line: "{{ item.line }}"
      with_items:
        - regexp: net.ipv4.ip_forward
          line: net.ipv4.ip_forward=1
        - regexp: net.bridge.bridge-nf-call-ip6table
          line: net.bridge.bridge-nf-call-ip6table=1
        - regexp: net.bridge.bridge-nf-call-iptables
          line: net.bridge.bridge-nf-call-iptables=1
        - regexp: fs.inotify.max_user_instances
          line: fs.inotify.max_user_instances=100000
        - regexp: fs.inotify.max_user_watches
          line: fs.inotify.max_user_watches=100000
    - name: Run sudo sysctl --system
      ansible.builtin.command: "sysctl --system"
      register: sysctl_output
      changed_when: sysctl_output.rc == 0
    - name: Disable swap
      block:
        - name: Change fstab
          ansible.builtin.lineinfile:
            path: /etc/fstab
            regexp: '\sswap\s'
            state: absent
        - name: Enable swapoff
          ansible.builtin.command: swapoff -a
          register: swapoff_output
          changed_when: swapoff_output.rc == 0
